class PigDHCP  < PigParser
        def can_parse(packet)
                return false if not packet.is_eth?
                return false if not packet.is_ip?
                return false if not packet.is_udp?
		return false if packet.udp_src != 68 and packet.udp_dst != 67
                return true
        end


	def register_rules
		self.rules = {
                        :eth => { :dst_mac => "ff:ff:ff:ff:ff:ff" },
                        :udp => { :dst_port => 67 , :src_port => 68 },
		}
	end
	def h2i(hstr)
		hstr.unpack('H*').first.to_i(16)	
	end

	def parseAddr(astr)
		count = h2i(astr[0,4])
		addrs = []
		i = 5
		(1..count).each { |c|
			type = astr[i]	
			plen = astr[i+1]	
			proto = astr[i+2]	
			alen = h2i(astr[i+3,2])
			i += 4
			addr = astr[i,alen].unpack("C*").join(".")
			i += alen
			addrs << addr
		}
		addrs
	end

	def str2ip(ipstr)
		return ipstr.unpack('CCCC').join('.')
	end

	def parse(pkt)
		dhcp = pkt.payload
		return if dhcp[0].unpack('C').first != 1
		data = {}
		data[:hwtype] = dhcp[1]	.unpack('C').first
		data[:hwlen] = dhcp[2].unpack('C').first
		data[:hops] = dhcp[3].unpack('C').first
		data[:xid] = dhcp[4,4].unpack("H*").first #4-7
		data[:secs] = h2i(dhcp[8,2]) #8-9
		data[:flags] = h2i(dhcp[10,2]) #10-11
		data[:client_ip] = str2ip(dhcp[12,4]) #12-15
		data[:your_ip] = str2ip(dhcp[16,4]) #16-19
		data[:server_ip] = str2ip(dhcp[20,4]) #20-23
		data[:gateway_ip] = str2ip(dhcp[24,4]) #24-27
		data[:hw_addr] = dhcp[28,data[:hwlen]].unpack("H2"*data[:hwlen]).join(":") # (MAX)28-43
		data[:server_name] = dhcp[44,64].rstrip #44-107
		data[:boot_file] = dhcp[108,128].rstrip #108-235
		vendor = dhcp[236,64] #236-299
		cookie = vendor[0,4].unpack("H*").first.to_i
		if cookie == 63825363
			vendor = vendor[4..-1]
			data[:vendor] = {}
			while vendor and vendor.length > 1 && vendor[0]!= "\xff" and vendor[0] != "\x00"
				vs = {}
				opt = vendor[0].unpack('C').first
				len  = vendor[1].unpack('C').first
				val = vendor[2,len]
				vendor = vendor[(2+len)..-1]
				case opt
					when 53
						data[:vendor][:dhcp_type] = "INFORM" if val.to_i == 8
					when 61
						data[:vendor][:client_identifier] = val[1..-1].unpack("H2"*len).join(":")
					when 12
						data[:vendor][:host_name] = val
					when 60
						data[:vendor][:vendor_class] = val
					when 55
						data[:vendor][:request_list] = val[0,len].unpack("C"*len)
				end
			end
		end
		srcip = pkt.ip_saddr
		if srcip == "0.0.0.0"
			srcip = ""
			ta = pkt.eth_saddr.split(":")[2..-1]
			ta.each { |a|
				srcip = srcip +   "." if srcip != ""
				srcip = srcip + a.to_i(16).to_s
			}
			
		end
		#FIX THIS, IT DOESN"T MATCH UP WITH REALITY
		print_status("DHCP Packet from #{pkt.eth_saddr}, #{srcip}")
		report_note(
			:host => srcip,
                	:type  => "passive.dhcp",
                	:data => data )

								
	end # end of parse
end

