class PigCDP < PigParser
	def can_parse(packet)
		return false if not packet.is_eth?
		return false if not packet.is_snap?
		return false if packet.snap_oui != 12
		return false if packet.snap_type != 8192
		return false if packet.payload[0] != "\x02"
		return true
	end

	def register_rules
		self.rules = {
			:eth => { :dst_mac => "01:00:0c:cc:cc:cc" },
		}
	end
	def h2i(hstr)
		hstr.unpack('H*').first.to_i(16)	
	end

	def parseAddr(astr)
		count = h2i(astr[0,4])
		addrs = []
		i = 5
		(1..count).each { |c|
			type = astr[i]	
			plen = astr[i+1]	
			proto = astr[i+2]	
			alen = h2i(astr[i+3,2])
			i += 4
			addr = astr[i,alen].unpack("C*").join(".")
			i += alen
			addrs << addr
		}
		addrs
	end

	def capa(val)
		capabilities = [ "L3 Routing","L2 Transparent Bridge","L2 Source-Route Bridge","L2 Switch","Multiprotocol","IGMP","Repeater"]
		ret = []
		i = 0	
		while i < capabilities.length 
			ret << capabilities[i] if (val & ( 1 << i)) > 0
			i += 1
		end
		ret
	end

	def parse(pkt)
		payload = pkt.payload[4..-1]
		i = 0
		data = {}
		while i < payload.length
			ftype = h2i(payload[i,2])
			length = h2i(payload[i+2,2]) - 4
			value = payload[i+4,length]
			i += length + 4
			case ftype
				when 1
					data['name'] = value
				when 2
					data['address'] = parseAddr(value)
				when 3
					data['portid'] = value
				when 4
					data['capabilities'] = capa(h2i(value))
				when 5
					data['version'] = value
				when 6
					data['platform'] = value
				when 7
					if length == 5
						data['prefix'] = value.unpack('C4').join('.')
						data['prefix'] += "/" + value[4].to_s
					end
				when 9
					data['vtpdomain'] = value
				when 10
					data['nativevlan'] = h2i(value)
				when 11
					data['duplex'] = "full"
					data['duplex'] = "half" if h2i(value) != 1
				when 14
					data['voipvlan'] = h2i(value[1,2]) if value[0] == 1
				when 18
					data['trustbitmap'] = value.unpack('h*').first
				when 22
					data['mgmtaddr'] = parseAddr(value)
				else
					next
			end
		end
		print_status("CDP Device: #{data['address'].first}")
		if data.has_key?('address')
                	report_note( :host  => data['address'].first,
                		:type  => "passive.cdp",
                		:data => data )
		end

								
	end # end of parse
end

