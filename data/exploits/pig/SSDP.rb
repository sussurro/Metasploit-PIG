require 'pp'

class PigSSDP < PigParser
        def can_parse(packet)
                return false if not packet.is_eth?
                return false if not packet.is_ip?
                return false if not packet.is_udp?
		return false if packet.udp_dst != 1900
                return true
        end


	def register_rules
		self.rules = {
			:eth => { :dst_mac => "01:00:5e:7f:ff:fa" },
			:udp => { :dst_port => 1900  },
		}
	end

	def parse(pkt)
		return if not can_parse(pkt)
		payload = pkt.payload
		return if not payload
		return if not payload.start_with?("NOTIFY")
		arr = payload.split("\r\n")
		data = {}
		arr.each { |l|
			data['location'] = l.split(": ",2).last if l.upcase.start_with?("LOCA")
			data['server'] = l.split(": ",2).last if l.upcase.start_with?("SERV")
		}
		print_status("SSDP Host: #{pkt.ip_saddr}")
		report_note( :host  => pkt.ip_saddr,
                	:type  => "passive.SSDP",
                	:port => 1900,
                	:proto => "udp",
                	:data => data )

								
	end # end of parse
end

