require 'pp'

class PigSNMP < PigParser
        def can_parse(packet)
                return false if not packet.is_eth?
                return false if not packet.is_ip?
                return false if not packet.is_udp?
		return false if packet.udp_dst != 161 and packet.udp_src != 161
		return false if packet.payload[0] != "\x30"
                return true
        end


	def parse(pkt)
		vstring = ["v1","v2c"]
		return if not can_parse(pkt)
		
		payload = pkt.payload
		return if not payload
		len = payload[1].unpack("C").first
		ver = payload[4].unpack("C").first
		return if ver > 1
		clen = payload[6].unpack("C").first
		cstring = payload[7,clen]
		rtype = "Unknown"
		server = pkt.ip_daddr
		case payload[clen + 7].unpack("C").first
		when 160
			rtype = "Get-Request"
		when 161
			rtype = "Get-Next_Request"
		when 162
			rtype = "Get-Response"
			server = pkt.ip_saddr
		when 163
			rtype = "Set-Request"
		else
			rtype = "Unknown"
		end
		
		data = {}
		data[:version] = vstring[ver]
		data[:community] = cstring	
		print_status("SNMP #{rtype} : #{server} #{vstring[ver]} #{cstring}")
                report_auth_info(
                	:host  => pkt.ip_daddr,
                	:port => 161,
                	:sname => 'snmp',
                	:user => '',
                	:pass => cstring,
                	:type => "snmp_#{vstring[ver]}",
                	:source_type => "captured",
                	:active => true
                )

								
	end # end of parse
end

